version: "3.2"
services:
#   trellis:
#       - 80:8080

  cassandra-1:
    image: cassandra:3.11.11
    user: 1000:1000
    environment:
      CASSANDRA_BROADCAST_ADDRESS: localhost
      CASSANDRA_LISTEN_ADDRESS: tasks.cassandra-1
    ports:
      - target: 9042
        published: 9042
        protocol: tcp
        mode: host
      - target: 7000
        published: 7000
        protocol: tcp
        mode: host
    volumes:
      - ./docker_stack_vols/cassandra-data:/var/lib/cassandra
    networks:
      drastic:

  cassandra-init:
    image: cassandra
    depends_on:
      - cassandra-1
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
    volumes:
      - ./docker_stack_vols/config/trellis.cql:/trellis.cql
    command: cqlsh cassandra-1 -f /trellis.cql
    networks:
      - drastic

  zookeeper:
    image: zookeeper:3.4.9
    hostname: zookeeper
    ports:
      - 2181:2181
    networks:
      drastic:
    volumes:
      - ./docker_stack_vols/zookeeper-data/data:/data
      - ./docker_stack_vols/zookeeper-data/txn-logs:/datalog

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - target: 9092
        published: 9092
        protocol: tcp
        mode: host
      - target: 9094
        published: 9094
        protocol: tcp
        mode: host
    networks:
      drastic:
    environment:
      KAFKA_LISTENERS: INT://kafka:9092,EXT://0.0.0.0:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INT:PLAINTEXT,EXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INT
      KAFKA_ADVERTISED_LISTENERS: INT://kafka:9092,EXT://pop-os:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_BROKER_ID: 1
      KAFKA_CLUSTER_ID: drastic
      KAFKA_CREATE_TOPICS: "test:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - ./docker_stack_vols/kafka-data:/var/lib/kafka/data
      - /var/run/docker.sock:/var/run/docker.sock

#  kafkacat:
#    image: confluentinc/cp-kafkacat
#    command: ["sleep", "infinity"]
#    networks:
#      drastic:

  fuseki:
    image: gregjan/fuseki:latest
    command: [ "--tdb2", "--update", "--loc", "databases/DB2", "/ds" ]
    ports:
      - target: 3030
        published: 3030
        protocol: tcp
        mode: host
    volumes:
      - ./docker_stack_vols/fuseki-data:/fuseki/databases
    networks:
      drastic:

  tika:
    image: apache/tika:1.28.4-full
    # Use custom script as entrypoint to go fetch models and setup recognisers
    entrypoint: [ "/ner/run_tika_server.sh"]
    restart: on-failure
    ports:
      - target: 9998
        published: 9998
        protocol: tcp
        mode: host
    volumes:
      -  ./docker_stack_vols/config/tika:/ner
    environment:
      TAG: 1.28.4
      TIKA_JAR: tika-server
      TIKA_SERVER_CLASS: org.apache.tika.server.TikaServerCli
    networks:
      drastic:

  elasticsearch:
    image: elasticsearch:7.17.1
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xmx2g
      REMOVED_ES_JAVA_OPTS: -Xms2g
      http.cors.enabled : "true"
      http.cors.allow-origin: "*"
      http.cors.allow-methods: OPTIONS, HEAD, GET, POST, PUT, DELETE
      http.cors.allow-headers: X-Requested-With,X-Auth-Token,Content-Type,Content-Length
      http.cors.allow-credentials: "true"
    ports:
      - target: 9200
        published: 9200
        protocol: tcp
        mode: host
    volumes:
      - ./docker_stack_vols/elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      drastic:
              
networks:
  drastic:
    driver: overlay
