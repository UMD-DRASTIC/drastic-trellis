plugins {
    id 'io.quarkus' version "$quarkusVersion"
    id 'eclipse'
}

def static randomPort() {
    try {
        ServerSocket server = new ServerSocket()
        server.setReuseAddress(true)
        server.bind(new InetSocketAddress(0))
        int port = server.getLocalPort()
        server.close()
        return port
    } catch (IOException e) {
        throw new IOException('Failed to find random free port', e)
    }
}

dependencies {
    implementation 'io.quarkus:quarkus-container-image-docker'
    implementation platform("io.quarkus:quarkus-bom:$quarkusVersion")
    implementation platform("org.trellisldp:trellis-bom:$trellisVersion")

    // Quarkus Application
    // implementation 'io.quarkus:quarkus-agroal'
    //implementation 'io.quarkus:quarkus-flyway'
    // implementation 'io.quarkus:quarkus-jdbc-postgresql'
    implementation 'io.quarkus:quarkus-jsonb'
    implementation 'io.quarkus:quarkus-resteasy'
    implementation 'io.quarkus:quarkus-security'
    implementation("io.quarkus:quarkus-undertow-websockets:$quarkusVersion")
    implementation 'io.quarkus:quarkus-smallrye-health'
    implementation 'io.quarkus:quarkus-smallrye-jwt'
    implementation 'io.quarkus:quarkus-smallrye-reactive-messaging'
    implementation 'io.quarkus:quarkus-smallrye-reactive-messaging-kafka'
    implementation 'io.quarkus:quarkus-smallrye-reactive-messaging-kafka-deployment'

    // Trellis Application
    implementation "org.trellisldp:trellis-app"
    implementation "org.trellisldp:trellis-cdi"

    // Trellis Auth
    implementation "org.trellisldp:trellis-jwt"
    implementation "org.trellisldp:trellis-webac"

    // Trellis components
    implementation "org.trellisldp:trellis-api"
    implementation "org.trellisldp:trellis-audit"
    implementation "org.trellisldp:trellis-cache"
    implementation "org.trellisldp:trellis-constraint"
    //implementation "org.trellisldp:trellis-file"
    implementation "org.trellisldp:trellis-http"
    // implementation "org.trellisldp:trellis-jdbc"
    implementation "org.trellisldp:trellis-jena"
    implementation "org.trellisldp:trellis-namespace"
    implementation "org.trellisldp:trellis-notification-jsonb"
    implementation "org.trellisldp:trellis-rdfa"
    implementation "org.trellisldp:trellis-reactive"
    implementation "org.trellisldp:trellis-vocabulary"

    // Trellis storage
    implementation("org.trellisldp.ext:trellis-cassandra:${trellisVersion}") //{
        //exclude group: 'javax.annotation', module: 'javax.annotation-api'
        //exclude group: 'org.eclipse.microprofile.health', module: 'microprofile-health-api'
    //}
    implementation("io.dropwizard.metrics:metrics-core:${cassandraDropwizardMetricsVersion}")

	// Camel
    //implementation enforcedPlatform("org.apache.camel:camel-bom:$camelVersion")
    //implementation enforcedPlatform("org.apache.camel.quarkus:camel-quarkus-bom:${camelQuarkusVersion}")
    //implementation "org.apache.camel.quarkus:camel-quarkus-main:${camelQuarkusVersion}"
    //implementation "org.apache.camel:camel-api"
    //implementation "org.apache.camel:camel-kafka"
    //implementation "org.apache.camel:camel-seda"
    ///implementation "org.apache.camel:camel-direct"
    //implementation "org.apache.camel:camel-http"
    //implementation "org.apache.camel:camel-jackson"
    //implementation "org.apache.camel.karaf:camel-blueprint"
    //implementation "org.trellisldp:camel-ldp:$camelLdpVersion"

    implementation "com.github.spullara.mustache.java:compiler:$mustacheVersion"
    implementation "com.google.guava:guava"
    implementation("org.apache.jena:jena-arq:$jenaVersion")
    implementation("org.apache.jena:jena-commonsrdf:$jenaVersion")
    implementation "org.slf4j:slf4j-api"
    implementation "org.yaml:snakeyaml"
	implementation "javax.websocket:javax.websocket-api:$websocketsVersion"
	implementation "org.apache.poi:poi:5.0.0"
	implementation "org.apache.poi:poi-ooxml:5.0.0"


    runtime "jakarta.activation:jakarta.activation-api"
    runtime "jakarta.xml.bind:jakarta.xml.bind-api"

    testImplementation "com.opentable.components:otj-pg-embedded:$otjPgVersion"
    testImplementation "io.quarkus:quarkus-junit5"
    testImplementation "io.rest-assured:rest-assured"
    testImplementation "org.jboss.resteasy:resteasy-client"
    testImplementation "org.apache.commons:commons-text:$commonsTextVersion"
    testImplementation "org.trellisldp:trellis-test"

    testImplementation "org.testcontainers:kafka:1.15.2"
}

test {
    if (!project.hasProperty("externalPgsql")) {
        def port = randomPort()
        systemProperty 'testing.pgsql.port', port
        systemProperty 'quarkus.datasource.username', 'postgres'
        systemProperty 'quarkus.datasource.password', 'postgres'
        systemProperty 'quarkus.datasource.jdbc.url', "jdbc:postgresql://localhost:$port/postgres"
    } else {
        systemProperty 'testing.external.pgsql', 'true'
    }

    systemProperty 'com.arjuna.ats.arjuna.objectstore.objectStoreDir', "$buildDir/data/ObjectStore"
    systemProperty 'trellis.file.memento-path', "$buildDir/data/mementos"
    systemProperty 'trellis.file.binary-path', "$buildDir/data/binaries"
    systemProperty 'mp.jwt.verify.publickey.location', 'https://www.trellisldp.org/tests/jwks.json'
}

eclipse.classpath.downloadJavadoc = true
eclipse.classpath.downloadSources = false
